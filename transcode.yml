##
# NOTE: This file is a sample configuration and also acts as a basis for unit testing.
#       Copy it to customize.
##

##
# global configuration
##
config:
  default_queue_file: '/volume1/config/sonarr/transcode_queue.txt'
  ffmpeg:             '/usr/bin/ffmpeg'
  ssh:                '/usr/bin/ssh'    # used only in cluster mode
  queues:                       # define your queues here
    qsv: 1                      # max 1 job at a time for QSV transcode
    cuda: 2                     # max 2 jobs at a time for nVidia CUDA transcodes
                                # everything else defaults to 1 (sequential transcode)
  clusters:
    household:                  # name for this cluster
      workstation:
        type: local             # special case - use the pytranscoder host also in the cluster
        ffmpeg: '/usr/bin/ffmpeg'
        status: enabled
      macpro:
        os: linux               # Choices are win10, linux, macos
        type: mounted           # machine with source media and host share a filesystem (nfs, samba, etc)
        ip: 192.168.2.65
        user: sshuser
        ffmpeg: '/usr/bin/ffmpeg'
        path-substitutions:     # optional, map source pathnames to equivalent on host
          - /volume2/ /media/
          - /volume3/ /media3/
        profiles:               # profiles allowed on this host
          - hevc
        status: enabled         # set to disabled to temporarily stop using
      win10:
        os: win10               # Choices are win10, linux, macos
        type: streaming         # host not using shared filesystem
        ip: 192.168.2.64        # address of host
        user: matt              # ssh login user
        working_dir: 'c:\temp'  # working folder on remote host, required for streaming type
        ffmpeg: '/usr/bin/ffmpeg'
        profiles:
          - hevc_cuda           # profiles allowed on this host
          - hevc_25fps
          - hevc_30fps
        status: enabled         # set to disabled to temporarily stop using

  plex_server: null             # optional. can be 'server:port'
  colorize: yes                 # enable colors in terminal output


##
# profile definitions.  You can model all your transcoding combinations here.
##
profiles:

  #
  # Sample cpu-based transcode, uses built-in default sequential queue
  #
  hevc:
    input_options:
    output_options: -threads 4 -c:v hevc -crf 20 -c:a copy -c:s copy -f matroska
    extension: '.mkv'
    threshold: 20


  #
  # Sample Intel QSV transcode setup, uses 'qsv' queue defined above
  #
  hevc_qsv:
    input_options: -hwaccel vaapi -hwaccel_device /dev/dri/renderD129 -hwaccel_output_format vaapi
    output_options: -vf scale_vaapi=format=p010 -c:v hevc_vaapi -crf 20 -c:a copy -c:s copy -f matroska
    extension: '.mkv'
    queue: qsv
    threshold: 20

  #
  # Sample nVidia transcode setup, uses 'cuda' queue defined above
  #
  hevc_cuda:          # what I use for almost everything
      input_options: |
        -hwaccel cuvid
      output_options: |
        -c:v hevc_nvenc
        -profile:v main
        -preset medium
        -crf 20
        -c:a copy
        -c:s copy
        -f matroska
      queue: cuda
      extension: '.mkv'
      threshold: 20         # 20% minimum size reduction %, otherwise source is preserved as-is

  hevc_25fps:               # when movie source is just too big, cut down fps
      input_options: |
         -hwaccel cuvid
      output_options: |
        -c:v hevc_nvenc
        -profile:v main
        -preset medium
        -crf 20
        -c:a copy
        -c:s copy
        -f matroska
        -r 25
      queue: cuda
      extension: '.mkv'

  hevc_30fps:               # when movie source is just too big, cut down fps
      input_options: |
         -hwaccel cuvid
      output_options: |
        -c:v hevc_nvenc
        -profile:v main
        -preset medium
        -crf 20
        -c:a copy
        -c:s copy
        -f matroska
        -r 30
      queue: cuda
      extension: '.mkv'

  x264:                    # basic x264 transcode using CPU (no CUDA or QSV support)
      input_options:
      output_options: |
        -c:v x264
        -crf 22
        -c:a copy
        -c:s copy
        -f mp4
      extension: '.mp4'

#
# Automatching happens when a profile isn't provided on the command line.  These rules are evalulated to find the
# most appropriate profile for each video to be transcoded.
#
# rule predicates:
#
#            vcodec         Video codec of the source ('ffmpeg -codecs' to see full list), may preceed with ! for not-equal test
#            res_height     Source video resolution height, operators < and > allowed
#            res_width      Source video resolution width, operators < and > allowed
#            filesize_mb    Size of the source file (in megabytes), operators allowed
#            runtime        Source runtime in minutes, operators allowed
#            fps            Framerate of the source
#            path           Full path of the source file. Value can be a regular expression (ie. '.*/Television/.*').
#            vcodec         Video codec used to encode the media
#
# Rules are evaluated in order.  First matching rule wins so order wisely.
# Rules with a profile of "SKIP" mean to skip processing of the matched video
#
rules:
  'skip video if already encoded in hevc/h265':
      profile: SKIP
      rules:
        vcodec: 'hevc'

  'high frame rate':
      profile: hevc_30fps
      rules:
        fps: '>30'
        filesize_mb: '>500'

  'skip video if resolution < 700':
      profile: SKIP
      rules:
        res_height: '<700'

  'content just too big and framey':
      profile: hevc_hd_25fps
      rules:
        runtime:      '<180'      # less than 3 hours
        filesize_mb:  '>6000'  # ..and larger than 6 gigabytes
        fps: '>25'

  'small enough already':   # skip if <2.5g size and higher than 720p and between 30 and 64 minutes long.
      profile: SKIP         # transcoding these will probably cause a noticeable quality loss so skip.
      rules:
        filesize_mb: '<2500'    # less than 2.5 gigabytes
        res_height: '720-1081'  # 1080p, allowing for random oddball resolutions still in the HD range
        runtime:  '30-65'       # between 30 and 65 minutes long

  'default':    # this will be the DEFAULT (no rules implies a match)
      profile: hevc_cuda
      rules:
        vcodec: '!hevc'

